package ${packageName}.controller;

import java.util.List;
import java.util.Arrays;

import lombok.RequiredArgsConstructor;
import org.springframework.security.access.prepost.PreAuthorize;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.PutMapping;
import org.springframework.web.bind.annotation.DeleteMapping;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RestController;
import com.reststyle.framework.common.oper_log.OperLog;
import com.reststyle.framework.common.oper_log.BusinessType;
import com.reststyle.framework.common.oper_log.OperUnit;
import ${packageName}.vo.${ClassName}Vo;
import ${packageName}.bo.${ClassName}QueryBo;
import ${packageName}.bo.${ClassName}AddBo;
import ${packageName}.bo.${ClassName}EditBo;
import ${packageName}.service.${ClassName}Service;
import com.reststyle.framework.common.unite_response.RestResult;
import com.reststyle.framework.common.unite_response.ResultUtil;
#if($table.crud || $table.sub)
#elseif($table.tree)
#end
import io.swagger.annotations.Api;
import io.swagger.annotations.ApiOperation;

/**
 * ${functionName}Controller
 * 
 * @author ${author}
 * @date ${datetime}
 */
@Api(value = "${functionName}控制器", tags = {"${functionName}管理"})
@RestController
@RequestMapping("/${businessName}" )
//@RequestMapping("/${moduleName}/${businessName}" )
public class ${ClassName}Controller
{

    @Autowired
    private ${ClassName}Service ${ClassName.substring(0, 1).toLowerCase()}${ClassName.substring(1)}Service;

    /**
     * 分页查询${functionName}列表
     */
    @ApiOperation("分页查询${functionName}列表")
    @PreAuthorize("hasAuthority('${permissionPrefix}:list')")
    @GetMapping("/list/paging")
    public RestResult listPaging(${ClassName}QueryBo bo)
    {
        PageInfo<${ClassName}Vo> = ${ClassName.substring(0, 1).toLowerCase()}${ClassName.substring(1)}Service.queryListPaging(bo);
        return ResultUtil.success(list);
    }


    /**
     * 查询${functionName}列表
     */
    @ApiOperation("查询${functionName}列表")
    @PreAuthorize("hasAuthority('${permissionPrefix}:list')")
    @GetMapping("/list")
    public RestResult list(${ClassName}QueryBo bo)
    {
        List<${ClassName}Vo> list = ${ClassName.substring(0, 1).toLowerCase()}${ClassName.substring(1)}Service.queryList(bo);
        return ResultUtil.success(list);
    }
    /**
     * 导出${functionName}列表
     */
    @ApiOperation("导出${functionName}列表")
    @PreAuthorize("hasAuthority('${permissionPrefix}:export')" )
    @OperLog(methodDetail = "导出${functionName}" , businessType = BusinessType.EXPORT, operUnit = OperUnit.${ClassName})
    @GetMapping("/export" )
    public RestResult export(${ClassName}QueryBo bo)
    {
        List<${ClassName}Vo> list = ${ClassName.substring(0, 1).toLowerCase()}${ClassName.substring(1)}Service.queryList(bo);
        ExcelUtil<${ClassName}Vo> util = new ExcelUtil<${ClassName}Vo>(${ClassName}Vo.class);
        return util.exportExcel(list, "${businessName}" );
    }

    /**
     * 获取${functionName}详细信息
     */
    @ApiOperation("获取${functionName}详细信息")
    @PreAuthorize("hasAuthority('${permissionPrefix}:query')" )
    @GetMapping(value = "/{${pkColumn.javaField}}" )
    public RestResult getInfo(@PathVariable("${pkColumn.javaField}" ) ${pkColumn.javaType} ${pkColumn.javaField})
    {
        ${ClassName.substring(0, 1).toLowerCase()}${ClassName.substring(1)}Service.queryById(${pkColumn.javaField});
        return ResultUtil.success();
    }

    /**
     * 新增${functionName}
     */
    @ApiOperation("新增${functionName}")
    @PreAuthorize("hasAuthority('${permissionPrefix}:add')" )
    @OperLog(methodDetail = "新增${functionName}" , businessType = BusinessType.INSERT , operUnit = OperUnit.${ClassName})
    @PostMapping
    public RestResult add(@RequestBody ${ClassName}AddBo bo)
    {
        ${ClassName.substring(0, 1).toLowerCase()}${ClassName.substring(1)}Service.insertByAddBo(bo);
        return ResultUtil.success();
    }

    /**
     * 修改${functionName}
     */
    @ApiOperation("修改${functionName}")
    @PreAuthorize("hasAuthority('${permissionPrefix}:edit')" )
    @OperLog(methodDetail = "修改${functionName}" , businessType = BusinessType.UPDATE, operUnit = OperUnit.${ClassName})
    @PutMapping
    public RestResult edit(@RequestBody ${ClassName}EditBo bo)
    {
        ${ClassName.substring(0, 1).toLowerCase()}${ClassName.substring(1)}Service.updateByEditBo(bo);
        return ResultUtil.success();
    }

    /**
     * 删除${functionName}
     */
    @ApiOperation("删除${functionName}")
    @PreAuthorize("hasAuthority('${permissionPrefix}:remove')" )
    @OperLog(methodDetail = "删除${functionName}" , businessType = BusinessType.DELETE, operUnit = OperUnit.${ClassName})
    @DeleteMapping("/{${pkColumn.javaField}s}" )
    public RestResult remove(@PathVariable ${pkColumn.javaType} ${pkColumn.javaField}s)
    {
        ${ClassName.substring(0, 1).toLowerCase()}${ClassName.substring(1)}Service.deleteWithValidByIds(Arrays.asList(${pkColumn.javaField}s);
        return ResultUtil.success();
    }
}
